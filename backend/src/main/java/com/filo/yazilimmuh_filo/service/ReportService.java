package com.filo.yazilimmuh_filo.service;

import com.filo.yazilimmuh_filo.dto.request.VehicleRequestDTO;
import com.filo.yazilimmuh_filo.dto.response.ReportDTO;
import com.filo.yazilimmuh_filo.dto.response.VehicleDTO;
import com.filo.yazilimmuh_filo.entity.*;
import com.filo.yazilimmuh_filo.repository.ReportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class ReportService {
    @Autowired
    private VehicleService vehicleService;
    @Autowired
    private ExpenseService expenseService;
    @Autowired
    private AssignmentService assignmentService;
    @Autowired
    private ReportRepository reportRepository;

    public List<ReportDTO> generateAllReports(LocalDate from, LocalDate to, User user) {
        List<Vehicle> vehicles = vehicleService.findAll();
        return vehicles.stream()
                .map(v -> generateVehicleReport(v.getId(), from, to, user))
                .collect(Collectors.toList());
    }

    public List<Report> findAll() {
        return reportRepository.findAll();
    }

    public ReportDTO generateVehicleReport(Long vehicleId, LocalDate from, LocalDate to, User user) {
        Optional<Vehicle> vehicle = vehicleService.findById(vehicleId);
        // Mevcut sayaç
        int currentOdo = vehicleService.getCurrentOdometer(vehicleId);
        // Dönem içi kilometre
        int mileage = vehicleService.getMileage(vehicleId, from, to);

        // Masrafları al
        List<Expense> expenses = expenseService.findByVehicleId(vehicleId);
        // İstenilen periyottaki masraflar
        List<Expense> periodExpenses = expenses.stream()
                .filter(e -> !e.getDate().isBefore(from) && !e.getDate().isAfter(to))
                .toList();
        // Tür bazında toplam
        Map<String, Double> byType = periodExpenses.stream()
                .collect(Collectors.groupingBy(
                        e -> e.getType().name(),
                        Collectors.summingDouble(Expense::getAmount)
                ));
        double totalExp = periodExpenses.stream()
                .mapToDouble(Expense::getAmount).sum();

        Integer size =  assignmentService.findByVehicleId(vehicleId)
                .stream()
                .filter(e -> !e.getStartDate().isBefore(from) && !e.getEndDate().isAfter(to))
                .toList()
                .size();

        Report report = new Report();
        report.setCreatedDate(LocalDate.now());
        String content = "Vehicle Report: " + vehicleId + "\n" +
                "Current Odometer: " + currentOdo + "\n" +
                "Mileage in Period: " + mileage + "\n" +
                "Expenses by Type: " + byType.toString() + "\n" +
                "Total Expense: " + totalExp + "\n" +
                "Assignments in Period: " + size + "\n"+
                "Generated on: " + LocalDate.now() + "\n" +
                "Generated by: " + user.getUsername() + "\n";
        report.setContent(content);
        report.setGeneratedBy(user);
        reportRepository.save(report);

        return new ReportDTO(
                new VehicleRequestDTO(vehicle.orElseThrow()),
                currentOdo,
                mileage,
                byType,
                totalExp,
                size
        );
    }
}